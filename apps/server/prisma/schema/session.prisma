// SESSION STATE MODELS

model SessionEvent {
  id          String   @id @default(cuid()) // Format: se-{timestamp}-{random}
  eventId     String   @unique // Format: hse-{timestamp}-{random}
  sessionId   String   // Session identifier
  instanceId  String   // Worker instance ID
  eventType   String   // hook.pre_tool, hook.post_tool, etc.
  eventData   Json     // Full event payload
  labels      String[] // Event labels for filtering
  timestamp   DateTime // Event timestamp
  createdAt   DateTime @default(now())
  
  @@index([sessionId])
  @@index([instanceId])
  @@index([eventType])
  @@index([timestamp])
  @@index([sessionId, timestamp]) // For efficient range queries
}

model SessionSnapshot {
  id          String   @id @default(cuid()) // Format: ss-{timestamp}-{random}
  snapshotId  String   @unique // Format: snap-{sessionId}-{timestamp}
  sessionId   String   // Session identifier
  instanceId  String   // Instance that created snapshot
  reason      SnapshotReason // Why snapshot was created
  eventCount  Int      // Number of events in snapshot
  size        Int      // Approximate size in bytes
  
  // Condensed state data
  context     Json     // Condensed context (tasks, tools, prompts, todos)
  summary     Json     // Event counts and metadata
  eventIds    String[] // List of event IDs included
  
  // Timestamps
  fromTime    DateTime // Start of snapshot period
  toTime      DateTime // End of snapshot period
  createdAt   DateTime @default(now())
  expiresAt   DateTime? // Optional expiration
  
  @@index([sessionId])
  @@index([createdAt])
  @@index([sessionId, createdAt]) // For finding latest snapshot
}

model SessionState {
  id          String   @id // Same as sessionId for 1:1 mapping
  sessionId   String   @unique
  instanceId  String   // Primary instance for this session
  
  // Current state
  lastEventId String?  // Last processed event
  lastActivity DateTime // Last activity timestamp
  eventCount  Int      @default(0)
  
  // Condensed current state
  activeTasks Json?    // Currently active tasks
  recentTools Json?    // Recently used tools
  currentTodos Json?   // Current todo state
  metadata    Json?    // Custom session metadata
  
  // State flags
  isActive    Boolean  @default(true)
  isStale     Boolean  @default(false)
  needsSnapshot Boolean @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([instanceId])
  @@index([lastActivity])
  @@index([isActive])
}

model HookAudit {
  id          String   @id @default(cuid())
  hookType    String   // pre_tool, post_tool, etc.
  hookId      String?  // Hook configuration ID if applicable
  sessionId   String?  // Session context
  instanceId  String?  // Instance context
  
  // Execution details
  params      Json     // Input parameters
  result      Json     // Execution result
  allowed     Boolean  // Whether hook allowed the action
  modified    Boolean  @default(false) // Whether params were modified
  reason      String?  // Reason for blocking or modification
  
  // Performance
  executionTime Int?   // Milliseconds
  timestamp   DateTime @default(now())
  
  @@index([hookType])
  @@index([sessionId])
  @@index([timestamp])
  @@index([allowed])
}

enum SnapshotReason {
  pre_compact     // Before context compaction
  manual          // Manual snapshot request
  checkpoint      // Periodic checkpoint
  error_recovery  // After error for recovery
  session_end     // End of session
  threshold       // Event count threshold reached
}